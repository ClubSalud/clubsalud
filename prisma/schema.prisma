// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum AccountPermissions {
  OWN
  ADM
  INS
  MEM
  OTHER
}

enum MemberState {
  ACTIVE
  INACTIVE
  OTHER
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum JobPosition {
  CLEANING
  MAINTENANCE
  RECEPTIONIST
  OTHER
}

enum ContractType {
  PERMANENT
  CASUAL
  OTHER
}

enum HealthPlanType {
  OSDE
  PAMI
  APROSS
  IPROSS
  OTHER
}

enum OncologicalDiseaseStatus {
  RESOLVED
  ACTIVE
}

model Account {
  // Fields
  id                   Int                  @id @default(autoincrement())
  username             String               @unique
  password             String
  permissions          AccountPermissions[] @default([OTHER])
  // Relations
  notificationSender   Notification[]       @relation(name: "sender")
  notifiactionReceiver Notification[]       @relation(name: "receiver")
  instructorAccount    Instructor?          @relation(name: "instructorAccount")
  memberAccount        Member?              @relation(name: "memberAccount")
  employeeAccount      Employee?            @relation(name: "employeeAccount")
}

model Doctor {
  // Fields
  id             Int          @id @default(autoincrement())
  name           String
  lastName       String
  dni            BigInt       @db.BigInt
  cuit           BigInt?      @db.BigInt
  phoneNumber    BigInt       @db.BigInt
  licenseNumber1 BigInt       @db.BigInt
  licenseNumber2 BigInt?      @db.BigInt
  email          String
  isExternal     Boolean
  // Relations
  derivation     Derivation[] @relation(name: "derivationDoctor")
}

model Instructor {
  // Fields
  id                   Int                    @id @default(autoincrement())
  name                 String
  lastName             String
  dni                  BigInt                 @db.BigInt
  cuit                 BigInt?                @db.BigInt
  phoneNumber          BigInt                 @db.BigInt
  address              String
  email                String
  degree               Boolean                @default(false)
  cbu                  BigInt?                @db.BigInt
  alias                String?
  // Foreignkeys
  accountId            Int                    @unique
  account              Account                @relation(fields: [accountId], references: [id], name: "instructorAccount", onDelete: Cascade)
  // Relations
  instructorPayments   InstructorPayment[]    @relation(name: "instructorPayment")
  scheduleInCharge     Schedule[]             @relation(name: "instructorInCharge")
  scheduleSubstitute   Schedule[]             @relation(name: "instructorSubstitute")
  attendanceInstructor AttendanceInstructor[] @relation(name: "attendanceInstructorInstructor")
  registrationForm     RegistrationForm[]     @relation(name: "registrationFormInstructor")
  followUpForm         FollowUpForm[]         @relation(name: "followUpFormInstructor")
}

model Member {
  // Fields
  id                  Int                    @id @default(autoincrement())
  name                String
  lastName            String
  dni                 BigInt                 @db.BigInt
  cuit                BigInt?                @db.BigInt
  phoneNumber         BigInt                 @db.BigInt
  address             String
  inscriptionDate     DateTime               @default(now())
  cancelationDate     DateTime?
  cancelationReason   String?
  derivedBy           String
  afiliateNumber      BigInt                 @db.BigInt
  state               MemberState
  remainingClasses    BigInt?                @db.BigInt
  // Foreignkeys
  accountId           Int                    @unique
  medicalRecordId     Int?                   @unique
  account             Account                @relation(fields: [accountId], references: [id], name: "memberAccount", onDelete: Cascade)
  medicalRecord       MedicalRecord?         @relation(fields: [medicalRecordId], references: [id], name: "medicalRecord")
  // Relations
  memberAttendance    Attendance[]           @relation(name: "attendanceMember")
  scheduleInscription ScheduleInscription[]  @relation(name: "scheduleInscription")
  memberSubscription  Subscription[]         @relation(name: "subscriptionMember")
  planSubscribed      HealthPlanSubscribed[] @relation(name: "planMember")
  payment             Payment[]              @relation(name: "paymentMember")
  derivation          Derivation[]           @relation(name: "derivationMember")
  registrationForm    RegistrationForm?      @relation(name: "registrationFormMember")
  followUpForm        FollowUpForm[]         @relation(name: "followUpFormMember")
}

model InstructorPayment {
  // Fields
  id             Int        @id @default(autoincrement())
  amount         Float
  scheduledHours Float
  workedHours    Float
  workedMonth    DateTime   @default(now())
  paymentDate    DateTime   @default(now())
  pricePerHoour  Float
  // Foreignkeys
  instructorId   Int
  instructor     Instructor @relation(fields: [instructorId], references: [id], name: "instructorPayment")
}

model Attendance {
  // Fields
  id       Int      @id @default(autoincrement())
  date     DateTime @default(now())
  // Foreignkeys
  classId  Int
  memberId Int
  class    Class    @relation(fields: [classId], references: [id], name: "attendanceClass")
  member   Member   @relation(fields: [memberId], references: [id], name: "attendanceMember")
}

model AttendanceInstructor {
  // Fields
  id           Int        @id @default(autoincrement())
  date         DateTime   @default(now())
  hours        Int        @default(1)
  // Foreignkeys
  classId      Int
  instructorId Int
  class        Class      @relation(fields: [classId], references: [id], name: "attendanceInstructorClass")
  instructor   Instructor @relation(fields: [instructorId], references: [id], name: "attendanceInstructorInstructor")
}

// Format 24hs each 30 min
// start: 0830
// end: 0900
model Schedule {
  // Fields
  id                   Int                   @id @default(autoincrement())
  day                  Days
  start                Int
  end                  Int
  // Foreignkeys
  instructorInCharge   Int?
  instructorSubstitute Int?
  classId              Int?
  charge               Instructor?           @relation(fields: [instructorInCharge], references: [id], name: "instructorInCharge")
  substitute           Instructor?           @relation(fields: [instructorSubstitute], references: [id], name: "instructorSubstitute")
  class                Class?                @relation(fields: [classId], references: [id], name: "scheduledClass")
  // Relations
  scheduleInscription  ScheduleInscription[] @relation(name: "scheduleInscription")
}

model Class {
  // Fields
  id                        Int                    @id @default(autoincrement())
  name                      String
  duration                  Float
  // Relations
  schedule                  Schedule[]             @relation(name: "scheduledClass")
  attendanceClass           Attendance[]           @relation(name: "attendanceClass")
  attendanceInstructorClass AttendanceInstructor[] @relation(name: "attendanceInstructorClass")
}

model ScheduleInscription {
  // Fields
  id         Int      @id @default(autoincrement())
  // Foreignkeys
  scheduleId Int
  memberId   Int
  schedule   Schedule @relation(fields: [scheduleId], references: [id], name: "scheduleInscription")
  member     Member   @relation(fields: [memberId], references: [id], name: "scheduleInscription")
}

model Payment {
  // Fields
  id             Int          @id @default(autoincrement())
  amount         Float
  date           DateTime     @default(now())
  // Foreignkeys
  memeberId      Int
  subscriptionId Int
  member         Member       @relation(fields: [memeberId], references: [id], name: "paymentMember", onDelete: Cascade)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], name: "paymentSubscription", onDelete: Cascade)
}

model Derivation {
  // Fields
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  diagnosis String
  guidance  String
  // Foreingkeys
  memberId  Int
  doctorId  Int
  member    Member   @relation(fields: [memberId], references: [id], name: "derivationMember")
  doctor    Doctor   @relation(fields: [doctorId], references: [id], name: "derivationDoctor")
}

model Notification {
  // Fields
  id         Int     @id @default(autoincrement())
  subject    String
  body       String
  // Foreignkeys
  senderId   Int
  receiverId Int
  sender     Account @relation(fields: [senderId], references: [id], name: "sender")
  receiver   Account @relation(fields: [receiverId], references: [id], name: "receiver")
}

model Employee {
  // Fields
  id               Int               @id @default(autoincrement())
  name             String
  lastName         String
  dni              BigInt            @db.BigInt
  cuit             BigInt?           @db.BigInt
  phoneNumber      BigInt            @db.BigInt
  email            String
  position         JobPosition
  contractType     ContractType
  salary           Float
  cbu              BigInt?           @db.BigInt
  alias            String?
  lastSalaryUpdate DateTime          @default(now())
  // Foreignkeys
  accountId        Int?              @unique
  account          Account?          @relation(fields: [accountId], references: [id], name: "employeeAccount")
  // Relations
  payment          EmployeePayment[] @relation(name: "paymentEmployee")
}

model EmployeePayment {
  // Fields
  id           Int      @id @default(autoincrement())
  hoursWorked  Float?
  amount       Float
  monthPayment DateTime @default(now())
  date         DateTime @default(now())
  // Foreignkeys
  employeeId   Int
  employee     Employee @relation(fields: [employeeId], references: [id], name: "paymentEmployee")
}

model BilledConsultation {
  // Fields
  id                     Int                  @id @default(autoincrement())
  amount                 Float
  date                   DateTime             @default(now())
  autorizationNumber     String               @default("0")
  // Foreignkeys
  subscriptionId         Int
  healthSubscribedPlanId Int
  subscription           Subscription         @relation(fields: [subscriptionId], references: [id], name: "consultationSubscription", onDelete: Cascade)
  plan                   HealthPlanSubscribed @relation(fields: [healthSubscribedPlanId], references: [id], name: "consultationPlan", onDelete: Cascade)
}

model HealthPlanSubscribed {
  // Fields
  id Int @id @default(autoincrement())
  afiliateNumber     String               @default("0")
  // Foreignkeys
  memberId           Int
  planId             Int
  // Relations
  member             Member               @relation(fields: [memberId], references: [id], name: "planMember", onDelete: Cascade)
  plan               HealthPlan           @relation(fields: [planId], references: [id], name: "planPlan", onDelete: Cascade)
  billedConsultation BilledConsultation[] @relation(name: "consultationPlan")
}

model HealthPlan {
  // Fields
  id                     Int                    @id @default(autoincrement())
  name                   String
  description            String?
  type                   HealthPlanType?
  paymentPerConsultation Float
  // Relations
  planSubscription       HealthPlanSubscribed[] @relation(name: "planPlan")
  record HealthPlanRecord[] @relation(name: "healthPlanRecord")
}

model HealthPlanRecord {
  id  Int @id @default(autoincrement())
  date DateTime @default(now())
  amount Float
  // Foreignkeys
  healthPlanId Int
  // Relations
  healthPlan HealthPlan @relation(fields: [healthPlanId], references: [id], name: "healthPlanRecord", onDelete: Cascade)
}

model MedicalRecord {
  // Fields
  id          Int     @id @default(autoincrement())
  medinttCode BigInt  @db.BigInt
  description String
  // Relations
  member      Member? @relation(name: "medicalRecord")
}

model Subscription {
  // Fields
  id                 Int                  @id @default(autoincrement())
  date               DateTime             @default(now())
  paid               Boolean
  remaining          Float
  total              Float
  initialDate        DateTime             @default(now())
  expirationDate     DateTime             @default(now())
  remainingClasses   Int                  @default(0)
  active             Boolean              @default(false)
  // ForeignKeys
  planId             Int?
  promotionId        Int
  memberId           Int
  plan               Plan?                @relation(fields: [planId], references: [id], name: "subscriptionPlan", onDelete: Cascade)
  promotion          Promotion            @relation(fields: [promotionId], references: [id], name: "subscriptionPromotion", onDelete: Cascade)
  member             Member               @relation(fields: [memberId], references: [id], name: "subscriptionMember", onDelete: Cascade)
  // Relations
  payment            Payment[]            @relation(name: "paymentSubscription")
  billedConsultation BilledConsultation[] @relation(name: "consultationSubscription")
}

model Plan {
  // Fields
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  durationMonth   Int
  discountPercent Float
  // Relations
  subscription    Subscription[] @relation(name: "subscriptionPlan")
}

model Promotion {
  // Fields
  id                  Int            @id @default(autoincrement())
  title               String
  description         String
  amountWeeklyClasses Int
  amountPrice         Float
  lastPriceUpdate     DateTime       @default(now())
  // Relations
  subscription        Subscription[] @relation(name: "subscriptionPromotion")
}

model InstructorPrice {
  // Fields
  id         Int      @id @default(autoincrement())
  degree     Boolean
  amount     Float
  active     Boolean  @default(false)
  lastUpdate DateTime @default(now())
}

model ExtraCost {
  // Fields
  id          Int      @id @default(autoincrement())
  amount      Int
  date        DateTime @default(now())
  description String
}

model RegistrationForm {
  // Fields
  id               Int      @id @default(autoincrement())
  evaluationDate   DateTime
  evaluationNumber Int      @default(autoincrement()) // Cambio 'numero_de_evaluacion' a 'evaluationNumber'

  hasHypertension                       Boolean // Cambio 'hipertension' a 'hasHypertension' para claridad en booleanos
  hasDiabetes                           Boolean // Cambio 'diabetes' a 'hasDiabetes'
  hasHypercholesterolemia               Boolean // Cambio 'hipercolesterolemia' a 'hasHypercholesterolemia'
  hasHypertriglyceridemia               Boolean // Cambio 'hipertrigliceridemia' a 'hasHypertriglyceridemia'
  hasStableHeartFailure                 Boolean // Cambio 'insuficiencia_cardiaca_estable' a 'hasStableHeartFailure'
  hasStableIschemicHeartDisease         Boolean // Cambio 'cardiopatia_isquemica_estable' a 'hasStableIschemicHeartDisease'
  hasChronicObstructivePulmonaryDisease Boolean // Cambio 'enfermedad_pulmonar_obstructiva_cronica' a 'hasChronicObstructivePulmonaryDisease'

  hasAsthma                Boolean // Cambio 'asma' a 'hasAsthma'
  hasOncologicalDisease    Boolean // Cambio 'enfermedad_oncologica' a 'hasOncologicalDisease'
  oncologicalDiseaseStatus OncologicalDiseaseStatus? // Cambio 'estado_enfermedad_oncologica' a 'oncologicalDiseaseStatus'
  hasChronicKidneyFailure  Boolean // Cambio 'insuficiencia_renal_cronica' a 'hasChronicKidneyFailure'
  hasObesity               Boolean // Cambio 'obesidad' a 'hasObesity'
  hasRecentTrauma          Boolean // Cambio 'traumatismo_reciente' a 'hasRecentTrauma'
  traumaLocation           String? // Cambio 'sitio_traumatismo' a 'traumaLocation'
  traumaDate               DateTime? // Cambio 'fecha_traumatismo' a 'traumaDate'
  hasRecentSurgery         Boolean // Cambio 'cirujia_reciente' a 'hasRecentSurgery'
  surgeryLocation          String? // Cambio 'sitio_cirujia' a 'surgeryLocation'
  surgeryDate              DateTime? // Cambio 'fecha_cirujia' a 'surgeryDate'
  hasSarcopenia            Boolean // Cambio 'sarcopenia' a 'hasSarcopenia'
  isUnderweight            Boolean // Cambio 'bajo_peso' a 'isUnderweight'
  hasFallsLastSixMonths    Boolean // Cambio 'caidas_ultimos_seis_meses' a 'hasFallsLastSixMonths'
  fallsPerMonth            Int? // Cambio 'cantidad_de_caidas_por_mes' a 'fallsPerMonth'
  otherConditions          String? // Cambio 'otros' a 'otherConditions'

  // ForeignKeys
  memberId     Int @unique // Cambio 'alumno' a 'studentId' para claridad
  instructorId Int // Cambio 'profesor' a 'professor' para estandarizar en inglés

  member     Member     @relation(fields: [memberId], references: [id], name: "registrationFormMember", onDelete: Cascade)
  instructor Instructor @relation(fields: [instructorId], references: [id], name: "registrationFormInstructor", onDelete: Cascade)
}

model FollowUpForm {
  // Fields
  id                Int      @id @default(autoincrement())
  followUpDate      DateTime
  rombergTest       Boolean // Cambio 'test_de_romberg' a 'rombergTest'
  dixonRuffierTest  Int // Cambio 'test_de_dixon_ruffier' a 'dixonRuffierTest' (entre 0 y 20)
  modifiedBorgScale Int // Cambio 'escala_de_borg_modificada' a 'modifiedBorgScale' (entre 0 y 10)

  // ForeignKeys
  memberId     Int // Cambio 'memberId' a 'memberId'
  instructorId Int // Cambio 'instructorId' a 'instructorId'

  member     Member     @relation(fields: [memberId], references: [id], name: "followUpFormMember", onDelete: Cascade)
  instructor Instructor @relation(fields: [instructorId], references: [id], name: "followUpFormInstructor", onDelete: Cascade)

  // Relations
  sixMinuteWalkTest SixMinuteWalkTest? @relation(name: "sixMinuteWalkTestFollowUpForm")
}

model SixMinuteWalkTest {
  // Fields
  id                      Int @id @default(autoincrement())
  initialDyspneaBorgScale Int // Cambio 'escala_de_borg_disnea_inicial' a 'initialDyspneaBorgScale'
  finalDyspneaBorgScale   Int // Cambio 'escala_de_borg_disnea_final' a 'finalDyspneaBorgScale'
  initialFatigueBorgScale Int // Cambio 'escala_de_borg_fatiga_inicial' a 'initialFatigueBorgScale'
  finalFatigueBorgScale   Int // Cambio 'escala_de_borg_fatiga_final' a 'finalFatigueBorgScale'
  initialBloodPressure    Int // Cambio 'tension_arterial_inicial' a 'initialBloodPressure'
  finalBloodPressure      Int // Cambio 'tension_arterial_final' a 'finalBloodPressure'
  initialHeartRate        Int // Cambio 'frecuencua_cargiaca_inicial' a 'initialHeartRate'
  finalHeartRate          Int // Cambio 'frecuencua_cargiaca_final' a 'finalHeartRate'

  // ForeignKeys
  followUpFormId Int           @unique
  followUpForm   FollowUpForm? @relation(fields: [followUpFormId], references: [id], name: "sixMinuteWalkTestFollowUpForm")
}
